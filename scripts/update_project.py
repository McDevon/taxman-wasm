import pathlib
import os


def list_source_directories(base_directory):
    return list_directories_containing_file_type(base_directory, '.c')


def list_header_directories(base_directory):
    return list_directories_containing_file_type(base_directory, '.h')


def list_directories_containing_file_type(base_directory, file_type):
    source_directories = []
    for root, _, files in os.walk(base_directory):
        for file in files:
            if pathlib.Path(file).suffix == file_type:
                source_directories.append(root)
                break
    return sorted(source_directories)


def list_files_in_directory(directory):
    files = []
    for file in os.listdir(directory):
        files.append(file)
    return sorted(files)


def create_makefile(source_dirs, header_dirs, main_file_dir, website_files):
    heap_size = 8388208
    stack_size = 61800

    file = open('Makefile', 'w', encoding='UTF-8')
    file.write('# This file is generated by the update_project.py script.\n'
               + '# Manual edits will be overwritten by the next update.\n'
               + '\n'
               )

    file.write('CC=emcc\n'
               + 'CFLAGS=-I. -v -s EXPORTED_RUNTIME_METHODS=\'["ccall", "cwrap", '
               + '"allocate", "intArrayFromString", "stackSave", "stackAlloc", '
               + '"stackRestore"]\' \\\n'
               + '       -s EXPORTED_FUNCTIONS=\'["_main", "_read_text_callback", '
               + '"_read_image_callback"]\' \\\n'
               + '	     -fsanitize=undefined \\\n'
               + '       --js-library web/taxmanLib.js'
               )

    for directory in header_dirs:
        file.write(' \\\n       -I ' + directory + '/')

    file.write(' # -D DEBUG\n'
               + '\n'
               + 'OUT_DIR=docs\n'
               + 'OBJ_DIR=obj\n'
               + 'SRC_DIR=platform\n'
               + 'COPY_DIR=web\n'
               + 'ASSETS_DIR=assets\n'
               + '\n'
               + 'MKDIR_P=mkdir -p\n'
               + 'CSRC = '
               )

    indent = ''
    for directory in source_dirs:
        file.write(indent + '$(wildcard ' + directory + '/*.c)')
        if indent == '':
            indent = ' \\\n       '

    file.write('\n'
               + 'OBJ = $(CSRC:.c=.o)\n'
               + 'COPY_FILES=$(patsubst ${COPY_DIR}/%,${OUT_DIR}/%,'
               + '$(wildcard ${COPY_DIR}/*))\n'
               + '\n'
               + '.PHONY: all clean directories assets\n'
               + '\n'
               + 'all: directories $(COPY_FILES) game assets\n'
               + '\n'
               + 'clean:\n'
               + '	rm -rf ${OUT_DIR} ${OBJ_DIR} ${OBJ} *.o\n'
               + '\n'
               + 'directories: ${OUT_DIR}\n'
               + '\n'
               + 'assets:\n'
               + '	bash scripts/generate_assets.sh\n'
               + '\n'
               + '${OUT_DIR} ${OBJ_DIR}:\n'
               + '	${MKDIR_P} $@\n'
               + '\n'
               + ''
               )

    for web_file in website_files:
        file.write('$(OUT_DIR)/' + web_file +
                   ': $(COPY_DIR)/' + web_file + '\n')

    file.write('\n'
               + '#-include $(OBJ:.o=.d)\n'
               + '\n'
               + '$(OUT_DIR)/%:\n'
               + '	cp -f $< $@\n'
               + '\n'
               + 'game: $(OBJ) $(CSRC) main.o\n'
               + '	$(CC) $(CFLAGS) -o ${OUT_DIR}/core.js $(OBJ) main.o\n'

               )

    file.close()


def main():
    code_root_directories = ['taxman-engine', 'game', 'platform']
    main_file_directory = 'src'
    website_files_directory = 'web'

    source_directories = []
    header_directories = []
    for directory in code_root_directories:
        source_directories += list_source_directories(directory)
        header_directories += list_header_directories(directory)
    website_files = list_files_in_directory(website_files_directory)

    create_makefile(
        source_directories, header_directories, main_file_directory, website_files
    )

    return 0


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(e)
